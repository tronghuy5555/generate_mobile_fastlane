# Copyright by Huypham [https://github.com/tronghuy5555/generate_mobile_fastlane]
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
   
  # fastlane dev build_number: [your build number] 
  desc "Submit a new Dev Build to App Distribution"
  lane :dev do |options|
    build_number = get_build_number(options[:build_number])
	# build_and_upload_firebase_app("dev", "Dev", build_number, ENV["FIREBASE_APP_ID_DEV"])
	build_and_upload_app_center("dev", "Dev", build_number)
  end

  desc "Submit a new Staging Build to App Distribution"
  lane :staging do |options|
    build_number = get_build_number(options[:build_number])
	# build_and_upload_firebase_app("staging", "Staging", build_number, ENV["FIREBASE_APP_ID_STAGING"])
	build_and_upload_app_center("staging", "Staging", build_number)
  end

  desc "Submit a new Production Build to App Distribution"
  lane :production do |options|
    build_number = get_build_number(options[:build_number])
	# build_and_upload_firebase_app("production", "Production", build_number,  ENV["FIREBASE_APP_ID_PRODUCTION"])
	build_and_upload_app_center("prod", "Production", build_number,)
	aab_paths = get_flutter_aab_path("prod")
	upload_to_play_store(
		track: 'beta',
		package_name: ENV["APP_PACKAGE_NAME"],
		aab_paths: [aab_paths,],
		json_key: ENV["PLAY_STORE_JSON_FILE_PATH"],
		skip_upload_metadata: true,
		skip_upload_changelogs: true,
		skip_upload_images: true,
		skip_upload_screenshots: true,
	)
	send_slack("Production","Google Play Store",build_number)
  end
end

def build_and_upload_firebase_app(flavor, flavor_name, build_number, app_id) 
  	Dir.chdir ".." do
    	sh("flutter", "pub", "get")
    	sh("flutter", "build", "appbundle", "--build-number=#{build_number}", "--flavor=#{flavor}")
  	end
	aab_path = get_flutter_aab_path(flavor)
    firebase_app_distribution(
		app: app_id,
		android_artifact_type: "AAB",
		android_artifact_path: aab_path,
        groups: ENV["FIREBASE_DISTRIBUTION_GROUP"],
		release_notes: git_branch
	)
	send_slack(flavor_name,"Firebase",build_number)
end

def build_and_upload_app_center(flavor, flavor_name, build_number) 
	Dir.chdir ".." do
	  sh("flutter", "pub", "get")
	  sh("flutter", "build", "appbundle", "--build-number=#{build_number}", "--flavor=#{flavor}")
	end
	# gradle(task: "assemble#{flavor_name}Release")
	aab_path = get_flutter_aab_path(flavor)
	# Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
	# Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
	appcenter_upload(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        owner_type: "user",
        app_name: ENV['APPCENTER_APP_NAME'],
        file: aab_path,
        notify_testers: true
    )
    version = appcenter_fetch_version_number(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        app_name: ENV['APPCENTER_APP_NAME']
    )
    app_center_release_url = get_appcenter_release_url(version["id"])
	send_slack(build_name,"App Center",build_number, {
		image_url: app_center_release_url
	})
end


def get_appcenter_release_url(id)
	return "https://appcenter.ms/orgs/#{ENV["APPCENTER_OWNER_NAME"]}/apps/#{ENV["APPCENTER_APP_NAME"]}/distribute/releases/#{id}"
end

def gen_qrcode_url(url)
	return "https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=#{url}"
end  

def get_flutter_aab_path(flavor)
	return "../build/app/outputs/bundle/#{flavor}Release/app-#{flavor}-release.aab"
end

def get_flutter_apk_path(flavor)
	return "../build/app/outputs/bundle/#{flavor}Release/app-#{flavor}-release.apk"
end

def send_slack(type,store,build_number, attachment_properties = {})
	defaultPayload =  {  
		"Built Number" => build_number,
   	}
	slack(
		message: "New `#{ENV["APP_NAME"]} Android #{type}` available on #{store} ğŸš€ğŸš€ğŸš€", 
	    slack_url: ENV["SLACK_URL_BUILD_SUCESS"],
		payload: defaultPayload,
		default_payloads: [:git_branch, :last_git_commit_message],
		attachment_properties: attachment_properties
	)
end

def get_build_number(build_number)
	if (build_number)
		return build_number
	end
	return number_of_commits(all: true)
end

def send_slack_errror(type,store,build_number,error)
	if (is_ci)
		slack(
			message: "The `#{ENV["APP_NAME"]} Android #{type}` for #{store} is currently having an error ğŸ˜­ğŸ˜­ğŸ˜­, please check it @channel ", 
			slack_url: ENV["SLACK_URL_BUILD_FAILED"],
			payload: {  
				"Built Number" => build_number,
				"Error description" => error,
			},
			default_payloads: [:git_branch, :last_git_commit_message],
			link_names: true
		)
	end
end
