# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:android)

platform :android do

  desc "Submit a new Dev Build to App Distribution"
  lane :dev do
    build_number = number_of_commits(all: true)
	build_and_upload_firebase_app("dev", "Dev", build_number, ENV["FIREBASE_APP_ID_DEV"])
  end

  desc "Submit a new Staging Build to App Distribution"
  lane :staging do
    build_number = number_of_commits(all: true)
	build_and_upload_firebase_app("staging", "Staging", build_number, ENV["FIREBASE_APP_ID_STAGING"])
  end

  desc "Submit a new Production Build to App Distribution"
  lane :production do
    build_number = number_of_commits(all: true)
	build_and_upload_firebase_app("production", "Production", build_number,  ENV["FIREBASE_APP_ID_PRODUCTION"])
	upload_to_play_store(
		track: 'beta',
		package_name: ENV["APP_PACKAGE_NAME"],
		aab_paths: [
			"../build/app/outputs/bundle/productionRelease/app-production-release.aab",
		],
		json_key: ENV["PLAY_STORE_JSON_FILE_PATH"],
		skip_upload_metadata: true,
		skip_upload_changelogs: true,
		skip_upload_images: true,
		skip_upload_screenshots: true,
	)
	send_slack("Production","Google Play Store",build_number)
  end
end

def build_and_upload_firebase_app(flavor, flavor_name, build_number, app_id) 
  	Dir.chdir ".." do
    	sh("flutter", "pub", "get")
    	sh("flutter", "build", "appbundle", "--build-number=#{build_number}", "--flavor=#{flavor}")
  	end
	gradle(task: "assemble#{flavor_name}Release")
    firebase_app_distribution(
		app: app_id,
		apk_path: "../build/app/outputs/apk/#{flavor}/release/app-#{flavor}-universal-release.apk",
        groups: ENV["FIREBASE_DISTRIBUTION_GROUP"],
		release_notes: git_branch
	)
	send_slack(flavor_name,"Firebase",build_number)
end

def send_slack(type,store,build_number)
	slack(
		message: "New `#{ENV["APP_NAME"]} Android #{type}` available on #{store} ğŸš€ğŸš€ğŸš€", 
	    slack_url: ENV["SLACK_URL_BUILD_SUCESS"],
		payload: {  
   			"Built Number" => build_number,
  		},
		default_payloads: [:git_branch, :last_git_commit_message]
	)
end

def send_slack_errror(type,store,build_number,error)
	if (is_ci)
		slack(
			message: "The `#{ENV["APP_NAME"]} Android #{type}` for #{store} is currently having an error ğŸ˜­ğŸ˜­ğŸ˜­, please check it @channel ", 
			slack_url: ENV["SLACK_URL_BUILD_FAILED"],
			payload: {  
				"Built Number" => build_number,
				"Error description" => error,
			},
			default_payloads: [:git_branch, :last_git_commit_message],
			link_names: true
		)
	end
end
